{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vishalkoripala/student-performance-prediction/blob/main/student-performance-prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Import Libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_absolute_error, r2_score\n",
        "\n",
        "# Step 2: Create Dataset\n",
        "data = {\n",
        "    'Study_Hours': [2, 3, 4, 5, 1, 7, 8, 6, 3, 9, 4, 5, 6, 2, 8],\n",
        "    'Attendance': [80, 85, 90, 95, 60, 98, 99, 92, 70, 100, 85, 88, 90, 75, 97],\n",
        "    'Previous_Performance': [60, 65, 70, 75, 50, 85, 88, 80, 55, 95, 72, 74, 77, 58, 90],\n",
        "    'Marks': [65, 68, 72, 78, 50, 86, 90, 82, 58, 95, 75, 77, 80, 60, 93]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Step 3: Display Dataset\n",
        "print(df.head())\n",
        "\n",
        "# Step 4: Split Dataset\n",
        "X = df[['Study_Hours', 'Attendance', 'Previous_Performance']]\n",
        "y = df['Marks']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 5: Linear Regression\n",
        "lr = LinearRegression()\n",
        "lr.fit(X_train, y_train)\n",
        "y_pred_lr = lr.predict(X_test)\n",
        "\n",
        "# Step 6: Decision Tree Regressor\n",
        "dt = DecisionTreeRegressor(random_state=42)\n",
        "dt.fit(X_train, y_train)\n",
        "y_pred_dt = dt.predict(X_test)\n",
        "\n",
        "# Step 7: Random Forest Regressor\n",
        "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred_rf = rf.predict(X_test)\n",
        "\n",
        "# Step 8: Evaluate Models\n",
        "def evaluate_model(y_test, y_pred, model_name):\n",
        "    print(f\"\\n📊 {model_name} Performance:\")\n",
        "    print(\"R2 Score:\", round(r2_score(y_test, y_pred), 3))\n",
        "    print(\"Mean Absolute Error:\", round(mean_absolute_error(y_test, y_pred), 3))\n",
        "\n",
        "evaluate_model(y_test, y_pred_lr, \"Linear Regression\")\n",
        "evaluate_model(y_test, y_pred_dt, \"Decision Tree Regressor\")\n",
        "evaluate_model(y_test, y_pred_rf, \"Random Forest Regressor\")\n",
        "\n",
        "# Step 9: Visualization\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.scatter(y_test, y_pred_rf, color='blue')\n",
        "plt.xlabel(\"Actual Marks\")\n",
        "plt.ylabel(\"Predicted Marks\")\n",
        "plt.title(\"Actual vs Predicted Marks (Random Forest)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 799
        },
        "id": "XXM-LwLAza8u",
        "outputId": "88bb3815-595e-4a7d-89f7-fff956d26c0b"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Study_Hours  Attendance  Previous_Performance  Marks\n",
            "0            2          80                    60     65\n",
            "1            3          85                    65     68\n",
            "2            4          90                    70     72\n",
            "3            5          95                    75     78\n",
            "4            1          60                    50     50\n",
            "\n",
            "📊 Linear Regression Performance:\n",
            "R2 Score: 0.973\n",
            "Mean Absolute Error: 1.835\n",
            "\n",
            "📊 Decision Tree Regressor Performance:\n",
            "R2 Score: 0.934\n",
            "Mean Absolute Error: 2.667\n",
            "\n",
            "📊 Random Forest Regressor Performance:\n",
            "R2 Score: 0.919\n",
            "Mean Absolute Error: 3.02\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Import Libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_absolute_error, r2_score\n",
        "\n",
        "# Step 2: Create Dataset (You can replace this with a CSV dataset too)\n",
        "data = {\n",
        "    'Study_Hours': [2, 3, 4, 5, 1, 7, 8, 6, 3, 9, 4, 5, 6, 2, 8],\n",
        "    'Attendance': [80, 85, 90, 95, 60, 98, 99, 92, 70, 100, 85, 88, 90, 75, 97],\n",
        "    'Previous_Performance': [60, 65, 70, 75, 50, 85, 88, 80, 55, 95, 72, 74, 77, 58, 90],\n",
        "    'Marks': [65, 68, 72, 78, 50, 86, 90, 82, 58, 95, 75, 77, 80, 60, 93]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Step 3: Define features and target\n",
        "X = df[['Study_Hours', 'Attendance', 'Previous_Performance']]\n",
        "y = df['Marks']\n",
        "\n",
        "# Step 4: Split into Train and Test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 5: Train Models\n",
        "lr = LinearRegression()\n",
        "dt = DecisionTreeRegressor(random_state=42)\n",
        "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "\n",
        "lr.fit(X_train, y_train)\n",
        "dt.fit(X_train, y_train)\n",
        "rf.fit(X_train, y_train)\n",
        "\n",
        "# Step 6: Evaluate Models\n",
        "def evaluate(model, name):\n",
        "    y_pred = model.predict(X_test)\n",
        "    print(f\"\\n📊 {name} Performance:\")\n",
        "    print(\"R² Score:\", round(r2_score(y_test, y_pred), 3))\n",
        "    print(\"Mean Absolute Error:\", round(mean_absolute_error(y_test, y_pred), 3))\n",
        "\n",
        "evaluate(lr, \"Linear Regression\")\n",
        "evaluate(dt, \"Decision Tree Regressor\")\n",
        "evaluate(rf, \"Random Forest Regressor\")\n",
        "\n",
        "# Step 7: Interactive Prediction\n",
        "print(\"\\n✨ Enter details of a new student to predict marks ✨\")\n",
        "study_hours = float(input(\"Enter Study Hours: \"))\n",
        "attendance = float(input(\"Enter Attendance (%): \"))\n",
        "previous_perf = float(input(\"Enter Previous Performance (out of 100): \"))\n",
        "\n",
        "new_data = np.array([[study_hours, attendance, previous_perf]])\n",
        "\n",
        "# Predict using all three models\n",
        "pred_lr = lr.predict(new_data)[0]\n",
        "pred_dt = dt.predict(new_data)[0]\n",
        "pred_rf = rf.predict(new_data)[0]\n",
        "\n",
        "print(\"\\n🎯 Predicted Marks:\")\n",
        "print(f\"Linear Regression: {pred_lr:.2f}\")\n",
        "print(f\"Decision Tree: {pred_dt:.2f}\")\n",
        "print(f\"Random Forest: {pred_rf:.2f}\")\n",
        "\n",
        "# Step 8: Final Comparison\n",
        "best_model = max(\n",
        "    [('Linear Regression', pred_lr), ('Decision Tree', pred_dt), ('Random Forest', pred_rf)],\n",
        "    key=lambda x: x[1]\n",
        ")\n",
        "print(f\"\\n🏆 Best Predicted Result: {best_model[0]} predicts marks ≈ {best_model[1]:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2qcAAR2M0nJI",
        "outputId": "4678a9f0-45cf-4744-a27a-322945000595"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 Linear Regression Performance:\n",
            "R² Score: 0.973\n",
            "Mean Absolute Error: 1.835\n",
            "\n",
            "📊 Decision Tree Regressor Performance:\n",
            "R² Score: 0.934\n",
            "Mean Absolute Error: 2.667\n",
            "\n",
            "📊 Random Forest Regressor Performance:\n",
            "R² Score: 0.919\n",
            "Mean Absolute Error: 3.02\n",
            "\n",
            "✨ Enter details of a new student to predict marks ✨\n",
            "Enter Study Hours: 6\n",
            "Enter Attendance (%): 85.3\n",
            "Enter Previous Performance (out of 100): 87.9\n",
            "\n",
            "🎯 Predicted Marks:\n",
            "Linear Regression: 88.17\n",
            "Decision Tree: 80.00\n",
            "Random Forest: 83.05\n",
            "\n",
            "🏆 Best Predicted Result: Linear Regression predicts marks ≈ 88.17\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n",
        "# Sample dataset\n",
        "data = {\n",
        "    'Study_Hours': [2, 3, 4, 5, 1, 6, 8, 7, 3, 9, 10, 5],\n",
        "    'Attendance': [70, 75, 80, 85, 60, 90, 95, 85, 65, 95, 100, 80],\n",
        "    'Previous_Score': [60, 65, 70, 75, 50, 80, 85, 78, 55, 88, 90, 74],\n",
        "    'Marks': [62, 68, 72, 78, 54, 83, 89, 82, 58, 91, 94, 76]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(df.head())\n",
        "X = df[['Study_Hours', 'Attendance', 'Previous_Score']]\n",
        "y = df['Marks']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "# Linear Regression\n",
        "lr = LinearRegression()\n",
        "lr.fit(X_train, y_train)\n",
        "\n",
        "# Decision Tree Regressor\n",
        "dt = DecisionTreeRegressor(random_state=42)\n",
        "dt.fit(X_train, y_train)\n",
        "\n",
        "# Random Forest Regressor\n",
        "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred_lr = lr.predict(X_test)\n",
        "y_pred_dt = dt.predict(X_test)\n",
        "y_pred_rf = rf.predict(X_test)\n",
        "def evaluate_model(y_test, y_pred, name):\n",
        "    print(f\"\\n📊 {name} Results:\")\n",
        "    print(\"R2 Score:\", r2_score(y_test, y_pred))\n",
        "    print(\"MAE:\", mean_absolute_error(y_test, y_pred))\n",
        "    print(\"MSE:\", mean_squared_error(y_test, y_pred))\n",
        "\n",
        "evaluate_model(y_test, y_pred_lr, \"Linear Regression\")\n",
        "evaluate_model(y_test, y_pred_dt, \"Decision Tree Regressor\")\n",
        "evaluate_model(y_test, y_pred_rf, \"Random Forest Regressor\")\n",
        "new_student = [[6, 85, 75]]\n",
        "\n",
        "print(\"\\n🎯 Predicted Marks:\")\n",
        "print(\"Linear Regression:\", lr.predict(new_student)[0])\n",
        "print(\"Decision Tree:\", dt.predict(new_student)[0])\n",
        "print(\"Random Forest:\", rf.predict(new_student)[0])\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "models = ['LR', 'DT', 'RF']\n",
        "scores = [\n",
        "    r2_score(y_test, y_pred_lr),\n",
        "    r2_score(y_test, y_pred_dt),\n",
        "    r2_score(y_test, y_pred_rf)\n",
        "]\n",
        "\n",
        "plt.bar(models, scores)\n",
        "plt.title(\"Model Comparison (R² Score)\")\n",
        "plt.xlabel(\"Algorithm\")\n",
        "plt.ylabel(\"Accuracy Score\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "LQl8nZL314PT",
        "outputId": "fafa9337-7b92-4b7e-f538-fa334286663b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Study_Hours  Attendance  Previous_Score  Marks\n",
            "0            2          70              60     62\n",
            "1            3          75              65     68\n",
            "2            4          80              70     72\n",
            "3            5          85              75     78\n",
            "4            1          60              50     54\n",
            "\n",
            "📊 Linear Regression Results:\n",
            "R2 Score: 0.998159784020103\n",
            "MAE: 0.6178389248577574\n",
            "MSE: 0.3831738607030068\n",
            "\n",
            "📊 Decision Tree Regressor Results:\n",
            "R2 Score: 0.9279615795090715\n",
            "MAE: 3.6666666666666665\n",
            "MSE: 15.0\n",
            "\n",
            "📊 Random Forest Regressor Results:\n",
            "R2 Score: 0.8999226254002134\n",
            "MAE: 4.066666666666667\n",
            "MSE: 20.838333333333335\n",
            "\n",
            "🎯 Predicted Marks:\n",
            "Linear Regression: 78.59093584461448\n",
            "Decision Tree: 78.0\n",
            "Random Forest: 79.08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Import Libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score, mean_squared_error\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Step 2: Create a Larger Synthetic Dataset\n",
        "np.random.seed(42)  # For reproducibility\n",
        "num_students = 500\n",
        "\n",
        "# Features with realistic distributions\n",
        "study_hours = np.random.normal(6, 2, num_students)        # Avg 6 hrs, SD 2 hrs\n",
        "study_hours = np.clip(study_hours, 1, 10)                 # Limit between 1 and 10\n",
        "\n",
        "attendance = np.random.normal(80, 10, num_students)       # Avg 80%, SD 10%\n",
        "attendance = np.clip(attendance, 50, 100)                 # Limit between 50% and 100%\n",
        "\n",
        "previous_performance = np.random.normal(70, 15, num_students) # Avg 70, SD 15\n",
        "previous_performance = np.clip(previous_performance, 40, 100) # Limit between 40 and 100\n",
        "\n",
        "# Target (Marks) - realistic formula with noise\n",
        "marks = (0.4*study_hours*10 + 0.3*attendance + 0.3*previous_performance\n",
        "         + np.random.normal(0, 5, num_students))  # Add random noise\n",
        "\n",
        "# Create DataFrame\n",
        "df = pd.DataFrame({\n",
        "    'Study_Hours': np.round(study_hours, 1),\n",
        "    'Attendance': np.round(attendance, 1),\n",
        "    'Previous_Performance': np.round(previous_performance, 1),\n",
        "    'Marks': np.round(marks, 1)\n",
        "})\n",
        "\n",
        "print(\"✅ Synthetic Dataset for 500 Students Created!\\n\")\n",
        "print(df.head())\n",
        "\n",
        "# Step 3: Split Data into Features and Target\n",
        "X = df[['Study_Hours', 'Attendance', 'Previous_Performance']]\n",
        "y = df['Marks']\n",
        "\n",
        "# Step 4: Split into Training & Testing Sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 5: Train Models\n",
        "\n",
        "# Linear Regression\n",
        "lr = LinearRegression()\n",
        "lr.fit(X_train, y_train)\n",
        "y_pred_lr = lr.predict(X_test)\n",
        "\n",
        "# Decision Tree Regressor\n",
        "dt = DecisionTreeRegressor(random_state=42)\n",
        "dt.fit(X_train, y_train)\n",
        "y_pred_dt = dt.predict(X_test)\n",
        "\n",
        "# Random Forest Regressor\n",
        "rf = RandomForestRegressor(random_state=42, n_estimators=200)\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred_rf = rf.predict(X_test)\n",
        "\n",
        "# Step 6: Evaluate Models\n",
        "def evaluate_model(name, y_test, y_pred):\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    print(f\"{name}:\\n R2 Score: {r2:.3f}\\n Mean Squared Error: {mse:.3f}\\n\")\n",
        "    return r2\n",
        "\n",
        "print(\"\\n📊 Model Evaluation Results:\")\n",
        "r2_lr = evaluate_model(\"Linear Regression\", y_test, y_pred_lr)\n",
        "r2_dt = evaluate_model(\"Decision Tree Regressor\", y_test, y_pred_dt)\n",
        "r2_rf = evaluate_model(\"Random Forest Regressor\", y_test, y_pred_rf)\n",
        "\n",
        "# Step 7: Compare Actual vs Predicted Marks\n",
        "comparison = pd.DataFrame({\n",
        "    'Actual Marks': y_test.values,\n",
        "    'LR Prediction': np.round(y_pred_lr, 1),\n",
        "    'DT Prediction': np.round(y_pred_dt, 1),\n",
        "    'RF Prediction': np.round(y_pred_rf, 1)\n",
        "})\n",
        "print(\"\\n🔍 Prediction Comparison:\\n\", comparison.head(10))\n",
        "\n",
        "# Step 8: Visualize Model Performance\n",
        "models = ['Linear Regression', 'Decision Tree', 'Random Forest']\n",
        "r2_scores = [r2_lr, r2_dt, r2_rf]\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.barplot(x=models, y=r2_scores)\n",
        "plt.title(\"Model Accuracy Comparison (R² Score)\")\n",
        "plt.ylabel(\"R² Score\")\n",
        "plt.show()\n",
        "\n",
        "# Step 9: Predict for a New Student\n",
        "# Example: Study_Hours=7, Attendance=85%, Previous_Performance=72\n",
        "new_data = pd.DataFrame([[7, 85, 72]], columns=['Study_Hours', 'Attendance', 'Previous_Performance'])\n",
        "pred_lr = lr.predict(new_data)[0]\n",
        "pred_dt = dt.predict(new_data)[0]\n",
        "pred_rf = rf.predict(new_data)[0]\n",
        "\n",
        "print(\"\\n🎯 Predicted Marks for a New Student (Study_Hours=7, Attendance=85, Previous_Performance=72):\")\n",
        "print(f\"Linear Regression: {pred_lr:.2f}\")\n",
        "print(f\"Decision Tree: {pred_dt:.2f}\")\n",
        "print(f\"Random Forest: {pred_rf:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fJsRMAy92WEa",
        "outputId": "58dce3cb-c5a0-4f0c-99d7-21ef3e70d005"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Synthetic Dataset for 500 Students Created!\n",
            "\n",
            "   Study_Hours  Attendance  Previous_Performance  Marks\n",
            "0          7.0        89.3                  91.0   85.9\n",
            "1          5.7        99.1                  83.9   75.0\n",
            "2          7.3        66.0                  70.9   66.2\n",
            "3          9.0        85.6                  60.3   79.9\n",
            "4          5.5        73.5                  80.5   67.5\n",
            "\n",
            "📊 Model Evaluation Results:\n",
            "Linear Regression:\n",
            " R2 Score: 0.764\n",
            " Mean Squared Error: 25.940\n",
            "\n",
            "Decision Tree Regressor:\n",
            " R2 Score: 0.529\n",
            " Mean Squared Error: 51.690\n",
            "\n",
            "Random Forest Regressor:\n",
            " R2 Score: 0.746\n",
            " Mean Squared Error: 27.865\n",
            "\n",
            "\n",
            "🔍 Prediction Comparison:\n",
            "    Actual Marks  LR Prediction  DT Prediction  RF Prediction\n",
            "0          83.4           80.6           78.8           81.9\n",
            "1          68.3           76.3           71.8           74.0\n",
            "2          98.1           92.5           92.1           88.0\n",
            "3          66.5           68.0           70.6           69.2\n",
            "4          71.5           74.0           71.2           73.4\n",
            "5          80.5           81.8           80.3           80.2\n",
            "6          74.8           76.1           74.7           78.4\n",
            "7          95.2           86.0           78.4           81.4\n",
            "8          56.4           64.9           66.9           66.3\n",
            "9          60.3           69.6           70.7           66.8\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🎯 Predicted Marks for a New Student (Study_Hours=7, Attendance=85, Previous_Performance=72):\n",
            "Linear Regression: 75.56\n",
            "Decision Tree: 72.60\n",
            "Random Forest: 75.11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "def create_dataset(num_students=500, seed=42):\n",
        "    \"\"\"\n",
        "    Creates a synthetic dataset with realistic student features and marks.\n",
        "    \"\"\"\n",
        "    np.random.seed(seed)\n",
        "    study_hours = np.random.normal(6, 2, num_students)\n",
        "    study_hours = np.clip(study_hours, 1, 10)\n",
        "\n",
        "    attendance = np.random.normal(80, 10, num_students)\n",
        "    attendance = np.clip(attendance, 50, 100)\n",
        "\n",
        "    previous_performance = np.random.normal(70, 15, num_students)\n",
        "    previous_performance = np.clip(previous_performance, 40, 100)\n",
        "\n",
        "    marks = (0.4*study_hours*10 + 0.3*attendance + 0.3*previous_performance\n",
        "             + np.random.normal(0, 5, num_students))\n",
        "\n",
        "    df = pd.DataFrame({\n",
        "        'Study_Hours': np.round(study_hours, 1),\n",
        "        'Attendance': np.round(attendance, 1),\n",
        "        'Previous_Performance': np.round(previous_performance, 1),\n",
        "        'Marks': np.round(marks, 1)\n",
        "    })\n",
        "\n",
        "    # Create the 'data' directory if it doesn't exist\n",
        "    import os\n",
        "    if not os.path.exists('data'):\n",
        "        os.makedirs('data')\n",
        "    df.to_csv('data/synthetic_student_data.csv', index=False)\n",
        "    print(\"✅ Dataset created at data/synthetic_student_data.csv\")\n",
        "    return df\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score, mean_squared_error\n",
        "import pandas as pd\n",
        "\n",
        "def train_models(X_train, y_train):\n",
        "    \"\"\"\n",
        "    Trains LR, Decision Tree, and Random Forest models.\n",
        "    \"\"\"\n",
        "    lr = LinearRegression()\n",
        "    lr.fit(X_train, y_train)\n",
        "\n",
        "    dt = DecisionTreeRegressor(random_state=42)\n",
        "    dt.fit(X_train, y_train)\n",
        "\n",
        "    rf = RandomForestRegressor(random_state=42, n_estimators=200)\n",
        "    rf.fit(X_train, y_train)\n",
        "\n",
        "    return lr, dt, rf\n",
        "\n",
        "def evaluate_models(models, X_test, y_test):\n",
        "    \"\"\"\n",
        "    Evaluates models and prints R2 Score & MSE.\n",
        "    \"\"\"\n",
        "    results = {}\n",
        "    for name, model in models.items():\n",
        "        y_pred = model.predict(X_test)\n",
        "        r2 = r2_score(y_test, y_pred)\n",
        "        mse = mean_squared_error(y_test, y_pred)\n",
        "        results[name] = {'R2': r2, 'MSE': mse}\n",
        "        print(f\"{name}:\\n  R2 Score: {r2:.3f}\\n  MSE: {mse:.3f}\\n\")\n",
        "    return results\n",
        "\n",
        "def predict_new_student(models, study_hours, attendance, previous_perf):\n",
        "    \"\"\"\n",
        "    Predict marks for a new student.\n",
        "    \"\"\"\n",
        "    import pandas as pd\n",
        "    new_data = pd.DataFrame([[study_hours, attendance, previous_perf]],\n",
        "                            columns=['Study_Hours', 'Attendance', 'Previous_Performance'])\n",
        "    predictions = {}\n",
        "    for name, model in models.items():\n",
        "        predictions[name] = model.predict(new_data)[0]\n",
        "    return predictions\n",
        "\n",
        "# Step 1: Import libraries (remaining necessary imports)\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Removed: from src.utils import create_dataset\n",
        "# Removed: from src.models import train_models, evaluate_models, predict_new_student\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import os\n",
        "\n",
        "# Step 2: Create Dataset\n",
        "# Use the function defined in this cell\n",
        "df = create_dataset()\n",
        "\n",
        "# Step 3: Prepare Features & Target\n",
        "X = df[['Study_Hours', 'Attendance', 'Previous_Performance']]\n",
        "y = df['Marks']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Train Models\n",
        "# Use the function defined in this cell\n",
        "lr, dt, rf = train_models(X_train, y_train)\n",
        "models = {'Linear Regression': lr, 'Decision Tree': dt, 'Random Forest': rf}\n",
        "\n",
        "# Step 5: Evaluate Models\n",
        "# Use the function defined in this cell\n",
        "results = evaluate_models(models, X_test, y_test)\n",
        "\n",
        "# Step 6: Visualize R2 Scores\n",
        "r2_scores = [v['R2'] for v in results.values()]\n",
        "plt.figure(figsize=(7,5))\n",
        "sns.barplot(x=list(results.keys()), y=r2_scores)\n",
        "plt.title(\"Model Accuracy Comparison (R² Score)\")\n",
        "plt.ylabel(\"R² Score\")\n",
        "# Create the 'reports' directory if it doesn't exist\n",
        "if not os.path.exists('reports'):\n",
        "    os.makedirs('reports')\n",
        "plt.savefig('reports/performance_report.png')\n",
        "plt.show()\n",
        "\n",
        "# Step 7: Predict New Student\n",
        "# Use the function defined in this cell\n",
        "preds = predict_new_student(models, study_hours=7, attendance=85, previous_perf=72)\n",
        "print(\"Predicted Marks for new student:\", preds)\n",
        "# Step 8: Final Comparison\n",
        "best_model = max(\n",
        "    [('Linear Regression', pred_lr), ('Decision Tree', pred_dt), ('Random Forest', pred_rf)],\n",
        "    key=lambda x: x[1]\n",
        ")\n",
        "print(f\"\\n🏆 Best Predicted Result: {best_model[0]} predicts marks ≈ {best_model[1]:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 766
        },
        "id": "XD9pbBSSILaA",
        "outputId": "2053205c-c364-4d51-bdc1-88f0d370ee72"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Dataset created at data/synthetic_student_data.csv\n",
            "Linear Regression:\n",
            "  R2 Score: 0.764\n",
            "  MSE: 25.940\n",
            "\n",
            "Decision Tree:\n",
            "  R2 Score: 0.529\n",
            "  MSE: 51.690\n",
            "\n",
            "Random Forest:\n",
            "  R2 Score: 0.746\n",
            "  MSE: 27.865\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Marks for new student: {'Linear Regression': np.float64(75.55637471823947), 'Decision Tree': np.float64(72.6), 'Random Forest': np.float64(75.10950000000007)}\n",
            "\n",
            "🏆 Best Predicted Result: Linear Regression predicts marks ≈ 75.56\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNHhydVm+f4NyY4wu76G1xd",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}